IQR(subset(diamonds,color == 'J')$price)
install.packages('alr3')
library(alr3)
library(alr3)
data("Mitchell")
?Mitchell
names(Mitchell)
ggplot(aes(x=Month,y=Temp),data=Mitchell)+geom_point()
library(ggplot2)
ggplot(aes(x=Month,y=Temp),data=Mitchell)+geom_point()
View(Mitchell)
View(Mitchell)
with(Mitchell,cor.test(Month,Temp))
?scale_x_continuous
?mod
ggplot(aes(x=Month,y=Temp),data=Mitchell)+geom_point()+scale_x_continuous(seq(0,203,12))
ggplot(aes(x=Month,y=Temp),data=Mitchell)+geom_point()+scale_x_continuous(breaks = seq(0,203,12))
ggplot(aes(x=(Month%%12),y=Temp),data=Mitchell)+
geom_point()
ggplot(aes(x=Month,y=Temp),data=Mitchell)+geom_point()+scale_x_continuous(breaks = seq(0,203,12))
library(dplyr)
View(pf)
ggplot(aes(x=age,y=friend_count_mean),data=pf.fx_by_age) + geom_line()
ggplot(aes(x=age,y=friend_count_mean),data=pf.fc_by_age) + geom_line()
View(pf)
pf <- read.csv('pseudo_facebook.tsv',sep='\t')
ggplot(aes(x=age,y=friend_count_mean),data=pf.fc_by_age) + geom_line()
pf.fc_by_age <- summarise(age_groups, friend_count_mean=mean(friend_count),
friend_count_median=median(friend_count),
n=n())
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups, friend_count_mean=mean(friend_count),
friend_count_median=median(friend_count),
n=n())
pf.fc_by_age <- arrange(pf.fc_by_age,age)
head(pf.fc_by_age)
ggplot(aes(x=age,y=friend_count_mean),data=pf.fc_by_age) + geom_line()
pf$age_with_month <- pf$age +  (12 - pf$dob_month) / 12
?summarise
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups, friend_count_mean=mean(friend_count),
friend_count_median=median(friend_count),
n=n())
pf.fc_by_age <- arrange(pf.fc_by_age, age)
head(pf.fc_by_age)
pf.fc_by_age_months <- pf %>%
group_by(age_with_month) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n=n()) %>%
arrange(age_with_month)
head(pf.fc_by_age_months)
ggplot(aes(x = age_with_months, y = friend_count_mean),data = subset(pf.fc_by_age_months,age_with_months<71)) + geom_line()
ggplot(aes(x = age_with_months, y = friend_count_mean),data = subset(pf.fc_by_age_months,age_with_month<71)) + geom_line()
ggplot(aes(x = age_with_months, y = friend_count_mean),data = subset(pf.fc_by_age_months,pf$age_with_month<71)) + geom_line()
ggplot(aes(x = age_with_month, y = friend_count_mean),data = subset(pf.fc_by_age_months, age_with_month<71)) + geom_line()
ggplot(aes(x=age,y=friend_count_mean),data=pf.fc_by_age) + geom_line()
p1 <- ggplot(aes(x=age,y=friend_count_mean),data=subset(pf.fc_by_age, age < 71)) + geom_line()
p2 <- ggplot(aes(x = age_with_month, y = friend_count_mean),data = subset(pf.fc_by_age_months, age_with_month<71)) + geom_line()
library(gridExtra)
grid.arrange(p2,p1,ncol=1)
p3 <- ggplot(aes(x = round(age/5)*5,y=frien_count),data=subset(pf,age<71))+geom_line(stat='summary',fun.y=mean)
grid.arrange(p2,p1,p3,ncol=1)
p3 <- ggplot(aes(x = round(age/5)*5,y=friend_count),data=subset(pf,age<71))+geom_line(stat='summary',fun.y=mean)
library(gridExtra)
grid.arrange(p2,p1,p3,ncol=1)
p1 <- ggplot(aes(x=age,y=friend_count_mean),data=subset(pf.fc_by_age, age < 71)) + geom_line() + geom_smooth()
p2 <- ggplot(aes(x = age_with_month, y = friend_count_mean),data = subset(pf.fc_by_age_months, age_with_month<71)) + geom_line() + geom_smooth()
p3 <- ggplot(aes(x = round(age/5)*5,y=friend_count),data=subset(pf,age<71))+geom_line(stat='summary',fun.y=mean)
library(gridExtra)
grid.arrange(p2,p1,p3,ncol=1)
library(ggplot2)
data("diamonds")
names(diamonds)
?diamonds
ggplot(aes(x = x, y = price),data=diamonds) + geom_point()
with(diamonds,cor.test(price,x))
with(diamonds,cor.test(price,y))
with(diamonds,cor.test(price,z))
ggplot(aes(x = depth, y = price),data=diamonds) + geom_point()
ggplot(aes(x = depth, y = price),data=diamonds) +
geom_point(alpha=1/100) +
scale_x_continuous(breaks = sep(0,80,2))
ggplot(aes(x = depth, y = price),data=diamonds) +
geom_point(alpha=1/100) +
scale_x_continuous(breaks = seq(0,80,2))
with(diamonds,cor.test(price,depth))
ggplot(aes(x = carat, y = price),data=diamonds) +
geom_point()
ggplot(aes(x = carat, y = price),data=diamonds) +
geom_point() + xlim(0,quantile(diamonds$carat,0.99))
+ylim(0,quantile(diamonds$price,0.99))
ggplot(aes(x = carat, y = price),data=diamonds) +
geom_point() + xlim(0,quantile(diamonds$carat,0.99))+ylim(0,quantile(diamonds$price,0.99))
volume <- diamonds$x * diamonds$y * diamonds$z
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(x = volume, y = price),data=diamonds) + geom_point()
with(subset(diamonds,volume !=0 & volume < 800),diamonds$price,diamonds$volume)
with(subset(diamonds,volume !=0 & volume < 800),cor.test(diamonds$price,diamonds$volume))
ggplot(aes(x = volume, y = price),data=subset(diamonds,volume !=0 & volume < 800) + geom_point() + geom_smooth()
ggplot(aes(x = volume, y = price),data=diamonds) + geom_point() + geom_smooth()
ggplot(aes(x = volume, y = price),data=diamonds) + geom_point() + geom_smooth()
ggplot(aes(x = volume, y = price),data=subset(diamonds,volume !=0 & volume < 800)) + geom_point() + geom_smooth()
ggplot(aes(x = volume, y = price),data=subset(diamonds,volume !=0 & volume < 800)) + geom_point() + geom_smooth(method='lm')
ggplot(aes(x = volume, y = price),data=subset(diamonds,volume !=0 & volume < 400)) + geom_point() + geom_smooth(method='lm')
detach("package:plyr", unload=TRUE)
library(dplyr)
group_by_clarity <- group_by(diamonds,clarity)
diamonds.diamondsByClarity <- summarise(group_by_clarity,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamonds.diamondsByClarity <- arrange(diamonds.diamondsByClarity,group_by_clarity)
group_by_clarity <- group_by(diamonds,clarity)
diamonds.diamondsByClarity <- summarise(group_by_clarity,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
View(diamonds.diamondsByClarity)
diamonds.diamondsByClarity <- arrange(diamonds.diamondsByClarity,group_by_clarity)
diamonds.diamondsByClarity <- arrange(clarity)
diamonds.diamondsByClarity <- arrange(diamonds$clarity)
diamonds.diamondsByClarity <- arrangediamonds.diamondsByClarity,(diamonds$clarity)
diamonds.diamondsByClarity <- arrangediamonds.diamondsByClarity,diamonds$clarity)
diamonds.diamondsByClarity <- arranged(diamonds.diamondsByClarity,diamonds$clarity)
diamonds.diamondsByClarity <- arrange(diamonds.diamondsByClarity,diamonds$clarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
?grid.arrange()
grid.arrange(diamonds_mp_by_clarity,diamonds_mp_by_color,ncol=1)
p1 <- ggplot(data = diamonds, aes(x = color, y = price)) +
geom_bar(stat = 'summary', fun.y = mean, width = 0.5)
p2 <- ggplot(data = diamonds, aes(x = color, y = price)) +
geom_bar(stat = 'summary', fun.y = median, width = 0.5)
grid.arrange(p1,p2,ncol=1)
p1 <- ggplot(data = diamonds, aes(x = clarity, y = price)) +
geom_bar(stat = 'summary', fun.y = mean, width = 0.5)
grid.arrange(p1,p2,ncol=1)
setwd('~/Downloads/project4')
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, messages=FALSE)
setwd('~/Downloads/project4')
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, messages=FALSE)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
# Obviously only need to run once
#install.packages("ggplot2")
#install.packages("polycor")
#install.packages("RColorBrewer", dependencies = TRUE)
#install.packages("dplyr")
#install.packages("memisc")
library(ggplot2)
library(polycor)
library(RColorBrewer)
library(gridExtra)
library(grid)
library(dplyr)
library(memisc)
# Load the Data
wq <- read.csv('wineQualityWhites.csv')
# Check out the column names
names(wq)
# Check out the dimensions of the data frame: rows & columns
dim(wq)
# Check out the structure of each column
str(wq)
# Quick summary of each column that shows min, max, missing values
summary(wq)
# Define a function to make histogram for different features.
univ_cont <- function(feature, bwidth) {
ggplot(data=wq, aes_string(x = feature)) +
geom_histogram(binwidth =  bwidth)
}
# Histogram of quality
theme_set(theme_minimal(12))
univ_cont("quality",1) +
scale_x_continuous(breaks = 1:10) +
title(xlab="score")
# Histogram of quality
theme_set(theme_minimal(12))
univ_cont("quality",1) +
scale_x_continuous(breaks = 1:10) +
ggtitle(xlab="score")
# Histogram of quality
theme_set(theme_minimal(12))
univ_cont("quality",1) +
scale_x_continuous(breaks = 1:10) +
xlab("mg/dm^3")
# Histogram of quality
theme_set(theme_minimal(12))
univ_cont("quality",1) +
scale_x_continuous(breaks = 1:10)
# Histogram of fixed.acidity
univ_cont("fixed.acidity",0.5) +
xlab("fixed.acidity (g/dm^3)")
# Histogram of volatile.acidity
plot_va1 <- univ_cont("volatile.acidity",0.1) +
xlab("volatile.acidity (g/dm^3)")
plot_va2 <- univ_cont("volatile.acidity",0.01) +
scale_x_log10() +
xlab("volatile.acidity (g/dm^3)")
grid.arrange(plot_va1, plot_va2, ncol = 2)
# Histogram of citric.acid
univ_cont("citric.acid",0.1) +
xlab("citric.acid (g/dm^3)")
# Histogram of residual.sugar
# Use scale_x_continuous to remove outliers in residual.sugar
plot_rs1 <- univ_cont("residual.sugar",0.1) +
scale_x_continuous(limits = c(0,25)) +
xlab("residual.sugar (g/dm^3)")
plot_rs2 <- univ_cont("residual.sugar",0.1) +
scale_x_log10() +
xlab("residual.sugar (g/dm^3)")
grid.arrange(plot_rs1, plot_rs2, ncol = 2)
# Histogram of chlorides
plot_chl1 <- univ_cont("chlorides",0.01) +
xlab("residual.sugar (g/dm^3)")
plot_chl2 <- univ_cont("chlorides",0.01) +
scale_x_log10() +
xlab("residual.sugar (g/dm^3)")
grid.arrange(plot_chl1, plot_chl2, ncol = 2)
# Histogram of chlorides
plot_chl1 <- univ_cont("chlorides",0.01) +
xlab("chlorides (g/dm^3)")
plot_chl2 <- univ_cont("chlorides",0.01) +
scale_x_log10() +
xlab("chlorides (g/dm^3)")
grid.arrange(plot_chl1, plot_chl2, ncol = 2)
# Histogram of free.sulfur.dioxide
# Use scale_x_continuous to remove outliers in free.sulfur.dioxide
univ_cont("free.sulfur.dioxide",5) +
scale_x_continuous(limits = c(0,150)) +
xlab("chlorides (mg/dm^3)")
# Histogram of total.sulfur.dioxide
univ_cont("total.sulfur.dioxide",10) +
title(xlab="total.sulfur.dioxide (mg/dm^3)")
# Histogram of total.sulfur.dioxide
univ_cont("total.sulfur.dioxide",10) +
xlab("total.sulfur.dioxide (mg/dm^3)")
# Histogram of density
univ_cont("density",0.001) +
scale_x_continuous(limits = c(0.985,1.005)) +
xlab("density (g/dm^3)")
# Histogram of density
univ_cont("density",0.001) +
scale_x_continuous(limits = c(0.985,1.005)) +
xlab("density (g/cm^3)")
# Histogram of alcohol
univ_cont("alcohol",0.2) +
xlab("alcohol (% by volume)")
# Create a variable represent whether the free sulfur dioxide is over 50
wq$free.sulfur.dioxide_over50ppm <- wq$free.sulfur.dioxide - 50
plot_over50 <- ggplot(aes(x=free.sulfur.dioxide_over50ppm),
data=subset(wq,free.sulfur.dioxide_over50ppm>0)) +
geom_histogram() +
scale_x_continuous(limits = c(0,120)) +
xlab("free.sulfur.dioxide (mg/dm^3)")
plot_below50 <- ggplot(aes(x=free.sulfur.dioxide_over50ppm),
data=subset(wq,free.sulfur.dioxide_over50ppm<0)) +
geom_histogram() +
xlab("free.sulfur.dioxide (mg/dm^3)")
grid.arrange(plot_over50, plot_below50, ncol=2)
ggplot(aes(x=free.sulfur.dioxide_over50ppm),
data=subset(wq,free.sulfur.dioxide_over50ppm>0)) +
geom_histogram() +
scale_x_log10() +
xlab("free.sulfur.dioxide_over50ppm (mg/dm^3)")
# Create a variable represent the bound sulfur dioxide
wq$bound.sulfur.dioxide <- wq$total.sulfur.dioxide - wq$free.sulfur.dioxide
# Histogram of bound.sulfur.dioxide
univ_cont("bound.sulfur.dioxide",10) +
xlab("bound.sulfur.dioxide (mg/dm^3)")
# Check the relationship between density and chlorides
ggplot(aes(x=density,y=chlorides),data=wq) +
geom_jitter(alpha=0.1) +
scale_x_continuous(limits = c(0.985,1.005)) +
ylab("chlorides (mg/dm^3)") +
geom_smooth(method='lm')
# Create a boxplot for density and residual.sugar
ggplot(aes(x=density,y=residual.sugar,group=1),data=wq) +
geom_boxplot() +
ylim(0,25) +
ylab("residual.sugar (g/dm^3)")
# Create a boxplot for density and residual.sugar
ggplot(aes(x=density,y=residual.sugar,group=1),data=wq) +
geom_boxplot() +
ylim(0,25) +
xlab("density (g/cm^3)") +
ylab("residual.sugar (g/dm^3)")
# Find how much other factors will influence alcohol and density
# Check the relationship between density and residual.sugar
ggplot(aes(x=density,y=residual.sugar),data=wq) +
geom_jitter(alpha=0.1) +
ylim(0,25) +
xlim(0.985,1.005) +
xlab("density (g/cm^3)") +
ylab("residual.sugar (g/dm^3)") +
geom_smooth(method='lm')
# Create a boxplot for quality and density
ggplot(aes(x=quality,y=density),data=wq) +
geom_boxplot() +
ylim(0.985,1.005) +
ylab("density (g/cm^3)")
# View summary
by(wq$density,wq$quality,summary)
# Check the relationship between quality and density.
ggplot(aes(x=quality,y=density),data=wq) +
geom_jitter(alpha= 0.1,color='blue') +
ylim(0.985,1.005) +
ylab("density (g/cm^3)")
# Create a boxplot for quality and alcohol
ggplot(aes(x=quality,y=alcohol),data=wq) +
geom_boxplot() +
ylab("alcohol (% by volume)")
# View summary
by(wq$alcohol,wq$quality,summary)
wq$quality <- as.factor(wq$quality)
# Verify my previous guess: alcohol and density are the main factors which will influence wine quailty.
# Check the relationship between quality and alcohol.
ggplot(aes(x=quality,y=alcohol),data=wq) +
geom_jitter(alpha= 0.1,color='orange') +
ylab("alcohol (% by volume)")
# Check the relationship between density and chlorides
ggplot(aes(x=density,y=chlorides),data=wq) +
geom_jitter(alpha=0.1) +
scale_x_continuous(limits = c(0.985,1.005)) +
xlab("density g/cm^3") +
ylab("chlorides (mg/dm^3)") +
geom_smooth(method='lm')
# Check the relationship between density and chlorides
ggplot(aes(x=density,y=chlorides),data=wq) +
geom_jitter(alpha=0.1) +
scale_x_continuous(limits = c(0.985,1.005)) +
xlab("density (g/cm^3)") +
ylab("chlorides (mg/dm^3)") +
geom_smooth(method='lm')
# Create a boxplot for density and chlorides
ggplot(aes(x=density,y=chlorides,group=1),data=wq) +
geom_boxplot() +
ylim(0,0.1) +
xlab("density (g/cm^3)") +
ylab("chlorides (mg/dm^3)")
# Check the relationship between alcohol and total.sulfur.dioxide
ggplot(aes(x=alcohol,y=bound.sulfur.dioxide),data=wq) +
geom_jitter(alpha = 0.1) +
xlab("alcohol (% by volume)") +
ylab("bound.sulfur.dioxide (mg/dm^3)") +
geom_smooth(method='lm')
# Create a boxplot for alcohol and bound.sulfur.dioxide
ggplot(aes(x=alcohol,y=bound.sulfur.dioxide,group=1),data=wq) +
geom_boxplot() +
xlab("alcohol (% by volume)") +
ylab("bound.sulfur.dioxide (mg/dm^3)")
# Check the relationship between alcohol and chlorides
ggplot(aes(x=alcohol,y=chlorides),data=wq) +
geom_jitter(alpha = 0.1) +
ylim(0.0,0.1) +
xlab("alcohol (% by volume)") +
ylab("chlorides (g/dm^3)") +
geom_smooth(method='lm')
# Create a boxplot for alcohol and chlorides
ggplot(aes(x=alcohol,y=chlorides,group=1),data=wq) +
geom_boxplot() +
ylim(0.0,0.1) +
xlab("alcohol (% by volume)") +
ylab("chlorides (g/dm^3)")
# Check the relationship between alcohol and density
ggplot(aes(x=alcohol,y=density),data=wq) +
geom_jitter(alpha=0.1) +
scale_y_continuous(limits = c(0.985,1.005)) +
xlab("alcohol (% by volume)") +
ylab("density (g/cm^3)") +
geom_smooth(method='lm')
# Create a boxplot for alcohol and density
ggplot(aes(x=alcohol,y=density,group=1),data=wq) +
geom_boxplot() +
scale_y_continuous(limits = c(0.985,1.005)) +
xlab("alcohol (% by volume)") +
ylab("density (g/cm^3)") +
# Create a boxplot for alcohol and density
ggplot(aes(x=alcohol,y=density,group=1),data=wq) +
geom_boxplot() +
scale_y_continuous(limits = c(0.985,1.005)) +
xlab("alcohol (% by volume)") +
ylab("density (g/cm^3)")
ggplot(aes(x=density,y=residual.sugar,colour=quality),data=wq) +
geom_point(alpha=0.5, size = 1, position = 'jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title='Quality',reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(limits = c(0.985,1.005)) +
scale_y_continuous(limits = c(0,25)) +
xlab("density (g/cm^3)") +
ylab("residual.sugar (g/dm^3)") +
ggtitle('Residual.sugar vs density and Quality')
ggplot(aes(x=density,y=chlorides,colour=quality),data=wq) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title='Quality',reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(limits = c(0.985,1.005)) +
scale_y_continuous(limits = c(0,0.1)) +
xlab("density (g/cm^3)") +
ylab("chlorides (g/dm^3)") +
ggtitle('Chlorides vs density and Quality')
ggplot(aes(x=alcohol,y=bound.sulfur.dioxide,colour=quality),data=wq) +
geom_point(alpha=0.5, size = 1, position = 'jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title='Quality',reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
xlab("alcohol (% by volume)") +
ylab("bound.sulfur.dioxide (mg/dm^3)") +
ggtitle('Bound.sulfur.dioxide vs alcohol and Quality')
ggplot(aes(x=alcohol,y=chlorides,colour=quality),data=wq) +
geom_point(alpha=0.5, size = 1, position = 'jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title='Quality',reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_y_continuous(limits = c(0,0.1)) +
xlab("alcohol (% by volume)") +
ylab("chlorides (g/dm^3)") +
ggtitle('Chlorides vs alcohol and Quality')
ggplot(aes(x=alcohol,y=density,colour=quality),data=wq) +
geom_point(alpha=0.5, size = 1, position = 'jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title='Quality',reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_y_continuous(limits = c(0.985,1.005)) +
xlab("alcohol (% by volume)") +
ylab("density (g/cm^3)") +
ggtitle('Density vs alcohol and Quality')
qplot(x=alcohol, y=..count../sum(..count..),
data=wq, geom='freqpoly',
color=quality) +
xlab("alcohol (% by volume)") +
scale_x_continuous(lim=c(7,17),breaks=seq(7,17,1))
qplot(x=density, y=..count../sum(..count..),
data=wq, geom='freqpoly',
color=quality) +
xlab("density (g/cm^3)") +
scale_x_continuous(limits = c(0.985,1.005))
ggplot(aes(x=alcohol,y=density),data=wq) +
geom_jitter(alpha=0.1) +
scale_y_continuous(limits = c(0.985,1.005)) +
xlab("alcohol (% by volume)") +
ylab("density (g/cm^3)") +
geom_smooth(method='lm')
ggplot(aes(x=density,y=residual.sugar,colour=quality),data=wq) +
geom_point(alpha=0.5, size = 1, position = 'jitter') +
scale_color_brewer(type='div',
guide = guide_legend(title='Quality',reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(limits = c(0.985,1.005)) +
scale_y_continuous(limits = c(0,25)) +
xlab("density (g/cm^3)") +
ylab("residual.sugar (g/dm^3)") +
ggtitle('Residual.sugar vs density and Quality')
plot_rs1 <- univ_cont("residual.sugar",0.1) +
scale_x_continuous(limits = c(0,25)) +
xlab("residual.sugar (g/dm^3)")
plot_rs2 <- univ_cont("residual.sugar",0.1) +
scale_x_log10() +
xlab("residual.sugar (g/dm^3)")
grid.arrange(plot_rs1, plot_rs2, ncol = 2)
# Create a boxplot for density and chlorides
ggplot(aes(x=density,y=chlorides,group=1),data=wq) +
geom_boxplot() +
ylim(0,0.1) +
xlab("density (g/cm^3)") +
ylab("chlorides (g/dm^3)")
# Check the relationship between density and chlorides
ggplot(aes(x=density,y=chlorides),data=wq) +
geom_jitter(alpha=0.1) +
scale_x_continuous(limits = c(0.985,1.005)) +
xlab("density (g/cm^3)") +
ylab("chlorides (g/dm^3)") +
geom_smooth(method='lm')
# Conditional average density
wq.quality_by_density <- wq %>%
group_by(quality) %>%
summarise(density_mean = mean(density),
density_median = median(density),
n = n()) %>%
arrange(quality)
ggplot(aes(x=quality,y=density_mean,group = 1),
data=wq.quality_by_density) +
geom_line() +
ylab("density_mean (g/cm^3)")
# Conditional average alcohol
wq.quality_by_alcohol <- wq %>%
group_by(quality) %>%
summarise(alcohol_mean = mean(alcohol),
alcohol_median = median(alcohol),
n = n()) %>%
arrange(quality)
ggplot(aes(x=quality,y=alcohol_mean,group = 1),
data=wq.quality_by_alcohol) +
geom_line() +
ylab("alcohol_mean (% by volume)")
# Histogram of free.sulfur.dioxide
# Use scale_x_continuous to remove outliers in free.sulfur.dioxide
univ_cont("free.sulfur.dioxide",5) +
scale_x_continuous(limits = c(0,150)) +
xlab("chlorides (g/dm^3)")
